{"version":3,"sources":["webpack:///./src/app/converter/converter-routing.module.ts","webpack:///./src/app/converter/converter.module.ts","webpack:///./src/app/converter/converter.service.ts","webpack:///./src/app/converter/converter/converter.component.html","webpack:///./src/app/converter/converter/converter.component.ts","webpack:///./src/app/converter/culture-converter.service.ts","webpack:///./src/app/converter/culture-converter/culture-converter.component.html","webpack:///./src/app/converter/culture-converter/culture-converter.component.ts","webpack:///./src/app/converter/europe-converter.service.ts","webpack:///./src/app/converter/usa-converter.service.ts"],"names":[],"mappings":"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","file":"converter-converter-module.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { ConverterComponent } from \"./converter/converter.component\";\nimport { CultureConverterComponent } from \"./culture-converter/culture-converter.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ConverterComponent\n  },\n  { path: \"culture\", component: CultureConverterComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ConverterRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConverterRoutingModule } from './converter-routing.module';\nimport { ConverterComponent } from './converter/converter.component';\nimport { FormsModule } from '@angular/forms';\nimport { CultureConverterComponent } from './culture-converter/culture-converter.component';\nimport { UsaConverterService } from './usa-converter.service';\nimport { CultureConverterService } from './culture-converter.service';\nimport { EuropeConverterService } from './europe-converter.service';\nimport { ConverterService } from './converter.service';\nimport { environment } from 'src/environments/environment';\n\nconst cultureFactory = (converterService: ConverterService) => {\n  if (environment.unitsCulture === 'metric') {\n  return new EuropeConverterService(converterService);\n  } else {\n  return new UsaConverterService(converterService);\n  }\n };\n\n@NgModule({\n  declarations: [ConverterComponent, CultureConverterComponent],\n  imports: [\n    CommonModule,\n    ConverterRoutingModule, FormsModule\n  ],\n  providers: [\n    {\n      provide: CultureConverterService,\n      useFactory: cultureFactory,\n      deps: [ConverterService]\n      }\n    ]\n\n})\nexport class ConverterModule { }\n","import { Injectable } from \"@angular/core\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ConverterService {\n  constructor() {}\n  public fromKilometersToMiles = kilometers => kilometers * 0.62137;\n  public fromMilesToKilometers = miles => miles * 1.609;\n  public fromCelsiusToFarenheit = celsius => celsius * (9 / 5) + 32;\n  public fromFarenheitToCelsius = farenheit => (farenheit - 32) * (5 / 9);\n}\n","module.exports = \"<h2> Distance Converter.</h2>\\n<h3> From Europe to USA </h3>\\n<form>\\n <fieldset>\\n <section>\\n <label for=\\\"kilometers\\\">Kilometers</label>\\n <input name=\\\"kilometers\\\"\\n type=\\\"number\\\"\\n [(ngModel)]=\\\"kilometers\\\"\\n placeholder=\\\"0\\\" />\\n </section>\\n </fieldset>\\n <input value=\\\"Convert\\\" type=\\\"button\\\" (click)=\\\"convert()\\\">\\n</form>\\n<section>\\n <h4>{{ miles | number:'1.2-2' }} miles</h4>\\n</section>\\n\"","import { Component, OnInit } from \"@angular/core\";\nimport { ConverterService } from '../converter.service';\n\n@Component({\n  selector: \"app-converter\",\n  templateUrl: \"./converter.component.html\",\n  styles: []\n})\nexport class ConverterComponent implements OnInit {\n  public kilometers = 0;\n  public miles: number;\n\n  constructor(private converterService: ConverterService) {}\n  public ngOnInit() {\n    this.convert();\n  }\n  public convert() {\n    this.miles = this.converterService.fromKilometersToMiles(this.kilometers);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CultureConverter } from './culture-converter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CultureConverterService implements CultureConverter {\n  sourceCulture: string;\n  targetCulture: string;\n  convertDistance: (source: number) => number;\n  convertTemperature: (source: number) => number;\n  constructor() {}\n }\n\n","module.exports = \"<h2> Culture Converter.</h2>\\n<h3> From {{ source }} to {{ target }} </h3>\\n<form>\\n <fieldset>\\n <section>\\n <label for=\\\"sourceUnits\\\">Distance</label>\\n <input name=\\\"sourceUnits\\\"\\n type=\\\"number\\\"\\n [(ngModel)]=\\\"sourceUnits\\\"\\n placeholder=\\\"0\\\" />\\n </section>\\n </fieldset>\\n <input value=\\\"Convert\\\" type=\\\"button\\\" (click)=\\\"convert()\\\">\\n</form>\\n<section>\\n <h4>Distance {{ targetUnits | number:'1.2-2' }} </h4>\\n</section>\\n\"","import { Component, OnInit } from \"@angular/core\";\nimport { CultureConverterService } from '../culture-converter.service';\n\n@Component({\n  selector: \"app-culture-converter\",\n  templateUrl: \"./culture-converter.component.html\",\n  styles: []\n})\nexport class CultureConverterComponent implements OnInit {\n  public source: string;\n  public target: string;\n  public sourceUnits = 0;\n  public targetUnits: number;\n  constructor(private cultureConverterService: CultureConverterService) {}\n  public ngOnInit() {\n    this.source = this.cultureConverterService.sourceCulture;\n    this.target = this.cultureConverterService.targetCulture;\n    this.convert();\n  }\n  public convert() {\n    this.targetUnits = this.cultureConverterService.convertDistance(\n      this.sourceUnits\n    );\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { ConverterService } from './converter.service';\nimport { CultureConverter } from './culture-converter';\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class EuropeConverterService implements CultureConverter {\n  sourceCulture = \"USA\";\n  targetCulture = \"Europe\";\n  constructor(private converterService: ConverterService) {}\n  convertDistance = this.converterService.fromMilesToKilometers;\n  convertTemperature = this.converterService.fromFarenheitToCelsius;\n}\n","import { Injectable } from '@angular/core';\nimport { CultureConverter } from './culture-converter';\nimport { ConverterService } from './converter.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsaConverterService implements CultureConverter {\n  sourceCulture = 'Europe';\n  targetCulture = 'USA';\n  constructor(private converterService: ConverterService) {}\n  convertDistance = this.converterService.fromKilometersToMiles;\n  convertTemperature = this.converterService.fromCelsiusToFarenheit;\n }\n"],"sourceRoot":""}